#include "header.h"


Grid::Grid(Rectangle rect)
{
	double x, y;

	domain = rect;	
	cout<<"\nInitialising mesh of size: "<<domain.Imax<<" x "<<domain.Jmax;

	for (int j = 0; j <= domain.Jmax + domain.Jmin; j++){
		for (int i = 0; i <= domain.Imax + domain.Imin; i++){
			
			x = domain.dx*(2.0*(double)i - (double)domain.Imin)/2.0;
			y = domain.dy*(2.0*(double)j - (double)domain.Jmin)/2.0;
			
			mesh[i][j].set_XY(x, y);
			mesh[i][j].set_eQ();								
		}
	}    
	cout<<"\nEvaluated cell coordinates...";
}

void Grid::calc_FI(int i, int j)
{
	Field Fx, Gy;
	double pN, pS, pE, pW, uN, uS, uE, uW, uP, vN, vS, vW, vE, vP;
	
	pN = mesh[i][j+1].U.C[0];
	pS = mesh[i][j-1].U.C[0];
	pE = mesh[i+1][j].U.C[0];
	pW = mesh[i-1][j].U.C[0];
	
	uP = mesh[i][j].U.C[1];
	uE = mesh[i+1][j].U.C[1];
	uW = mesh[i-1][j].U.C[1];
	uN = mesh[i][j+1].U.C[1];
	uS = mesh[i][j-1].U.C[1];
	
	vP = mesh[i][j].U.C[2];
	vN = mesh[i][j+1].U.C[2];
	vS = mesh[i][j-1].U.C[2];
	vE = mesh[i+1][j].U.C[2];
	vW = mesh[i-1][j].U.C[2];
	
	// Store, dF/dx, add dG/dx, invert sign
	Fx.C[0] = (uE - uW)/(2.0*beta);
	Fx.C[1] = ((uP + uE)*(uP + uE) - (uP + uW)*(uP + uW))/4.0
		+ (pE - pW)/2.0
		- (1/(Re*domain.dx))*(uE - 2.0*uP + uW);
	Fx.C[2] = ((uP + uE)*(vP + vE) - (uP + uW)*(vP + vW))/4.0
		- (1/(Re*domain.dx))*(vE - 2.0*vP + vW);
	Fx /= -domain.dx;
	
	Gy.C[0] = (vN - vS)/(2.0*beta);
	Gy.C[1] = ((uP + uN)*(vP + vN) - (uP + uS)*(vP + vS))/4.0
		- (1/(Re*domain.dy))*(uN - 2.0*uP + uS);
	Gy.C[2] = ((vP + vN)*(vP + vN) - (vP + vS)*(vP + vS))/4.0
		+ (pN - pS)/2.0
		- (1/(Re*domain.dy))*(vN - 2.0*vP + vS);
	Gy /= -domain.dy;
	
	mesh[i][j].FI += Fx;
	mesh[i][j].FI += Gy;
}

void Grid::calc_J(int i, int j)
{
	double uN, uS, uE, uW, uP, vN, vS, vW, vE, vP, dx, dy;

	dx = domain.dx;
	dy = domain.dy;

	uP = mesh[i][j].U.C[1];
	uE = mesh[i+1][j].U.C[1];
	uW = mesh[i-1][j].U.C[1];
	uN = mesh[i][j+1].U.C[1];
	uS = mesh[i][j-1].U.C[1];
	
	vP = mesh[i][j].U.C[2];
	vN = mesh[i][j+1].U.C[2];
	vS = mesh[i][j-1].U.C[2];
	vE = mesh[i+1][j].U.C[2];
	vW = mesh[i-1][j].U.C[2];	
						
	// dt*Bx
	mesh[i][j].Bx[0][0] = 0.0;
	mesh[i][j].Bx[0][1] = 0.0;
	mesh[i][j].Bx[0][2] = 0.0;
	
	mesh[i][j].Bx[1][0] = 0.0;
	mesh[i][j].Bx[1][1] = ((uE - uW)/2.0 + 2.0/(Re*dx))/dx;
	mesh[i][j].Bx[1][2] = 0.0;
	
	mesh[i][j].Bx[2][0] = 0.0;
	mesh[i][j].Bx[2][1] = ((vE - vW)/4.0)/dx;
	mesh[i][j].Bx[2][2] = ((uE - uW)/2.0 + 2.0/(Re*dx))/dx;

	// dt*By
	mesh[i][j].By[0][0] = 0.0;
	mesh[i][j].By[0][1] = 0.0;
	mesh[i][j].By[0][2] = 0.0;
	
	mesh[i][j].By[1][0] = 0.0;
	mesh[i][j].By[1][1] = ((vE - vW)/2.0 + 2.0/(Re*dy))/dy;
	mesh[i][j].By[1][2] = ((uE - uW)/4.0)/dy;
	
	mesh[i][j].By[2][0] = 0.0;
	mesh[i][j].By[2][1] = 0.0;
	mesh[i][j].By[2][2] = ((vE - vW)/2.0 + 2.0/(Re*dy))/dy;
	
	// dt*Cx
	mesh[i][j].Cx[0][0] = 0.0;
	mesh[i][j].Cx[0][1] = 1.0/(2.0*beta*dx);
	mesh[i][j].Cx[0][2] = 0.0;
	
	mesh[i][j].Cx[1][0] = 0.5/dx;
	mesh[i][j].Cx[1][1] = ((uE + uP)/2.0 - 1.0/(Re*dx))/dx;
	mesh[i][j].Cx[1][2] = 0.0;
	
	mesh[i][j].Cx[2][0] = 0.0;
	mesh[i][j].Cx[2][1] = ((vE + vP)/4.0)/dx;
	mesh[i][j].Cx[2][2] = ((uE + uP)/4.0 - 1.0/(Re*dx))/dx;
	
	// dt*Ax
	mesh[i][j].Ax[0][0] = 0.0;
	mesh[i][j].Ax[0][1] = -1.0/(2.0*beta*dx);
	mesh[i][j].Ax[0][2] = 0.0;
	
	mesh[i][j].Ax[1][0] = -0.5/dx;
	mesh[i][j].Ax[1][1] = -((uW + uP)/2.0 + 1.0/(Re*dx))/dx;
	mesh[i][j].Ax[1][2] = 0.0;
	
	mesh[i][j].Ax[2][0] = 0.0;
	mesh[i][j].Ax[2][1] = -((vW + vP)/4.0)/dx;
	mesh[i][j].Ax[2][2] = -((uW + uP)/4.0 + 1.0/(Re*dx))/dx;
	
	// dt*Cy 
	mesh[i][j].Cy[0][0] = 0.0;
	mesh[i][j].Cy[0][1] = 1.0/(2.0*beta*dy);
	mesh[i][j].Cy[0][2] = 0.0;

	mesh[i][j].Cy[1][0] = 0.5/dy;
	mesh[i][j].Cy[1][1] = ((vN + vP)/2.0 - 1.0/(Re*dy))/dy;
	mesh[i][j].Cy[1][2] = ((uN + uP)/4.0)/dy;
	
	mesh[i][j].Cy[2][0] = 0.0;
	mesh[i][j].Cy[2][1] = 0.0;
	mesh[i][j].Cy[2][2] = ((vN + vP)/4.0 - 1.0/(Re*dy))/dy;
	
	// dt*Ay
	mesh[i][j].Ay[0][0] = 0.0;
	mesh[i][j].Ay[0][1] = -1.0/(2.0*beta*dy);
	mesh[i][j].Ay[0][2] = 0.0;
	
	mesh[i][j].Ay[1][0] = -0.5/dy;
	mesh[i][j].Ay[1][1] = -((vS + vP)/2.0 + 1.0/(Re*dy))/dy;
	mesh[i][j].Ay[1][2] = -((uS + uP)/4.0)/dy;
	
	mesh[i][j].Ay[2][0] = 0.0;
	mesh[i][j].Ay[2][1] = 0.0;
	mesh[i][j].Ay[2][2] = -((vS + vP)/4.0 + 1.0/(Re*dy))/dy;	
}

void Grid::calc_BC(){

	
	for(int j = domain.Jmin; j <= domain.Jmax; j++){
		
		// Neumann on Pressure
		mesh[0][j].U.C[0] = mesh[1][j].U.C[0];   		
		mesh[domain.Imin + domain.Imax][j].U.C[0] = mesh[domain.Imax][j].U.C[0];
		
		// No Slip on velocities
		mesh[0][j].U.C[1] = -mesh[1][j].U.C[1];   		
		mesh[domain.Imin + domain.Imax][j].U.C[1] = -mesh[domain.Imax][j].U.C[1];
		mesh[0][j].U.C[2] = -mesh[1][j].U.C[2];   		
		mesh[domain.Imin + domain.Imax][j].U.C[2] = -mesh[domain.Imax][j].U.C[2];

	}  
  
	for(int i = domain.Imin; i <= domain.Imax; i++){
		
		// Neumann on Pressure
		mesh[i][0].U.C[0] = mesh[i][1].U.C[0];   		
		mesh[i][domain.Jmin + domain.Jmax].U.C[0] = mesh[i][domain.Jmax].U.C[0];

		// No Slip on velocities
		mesh[i][0].U.C[1] = -mesh[i][1].U.C[1];   		
		mesh[i][domain.Jmin + domain.Jmax].U.C[1] = -mesh[i][domain.Jmax].U.C[1];

		mesh[i][0].U.C[2] = -mesh[i][1].U.C[2];   		
		mesh[i][domain.Jmin + domain.Jmax].U.C[2] = -mesh[i][domain.Jmax].U.C[2];

  }  
}

void Grid::calc_Q()
{
	
	for(int j = domain.Jmin; j <= domain.Jmax; j++){
		for(int i = domain.Imin; i <= domain.Imax; i++){
						
			calc_FI(i, j);
			calc_J(i, j);		
		}
	}
	
	cout<<"\nInformation from cell 1,1";
	cout<<"\nCoordinates: "<<mesh[1][1].x<<", "<<mesh[1][1].y;
	cout<<"\nValue of eFI: "<<mesh[1][1].eFI;
	cout<<"\nValue of FI: "<<mesh[1][1].FI;
	
	cout<<"\nEvaluated control volume average flux integrals...";
}

// void Grid::calc_EJ()
// {	
		
// 	mesh[10][10].dU = 0.000001;		
	
// 	for(int j = domain.Jmin; j <= domain.Jmax; j++){
// 		for(int i = domain.Imin; i <= domain.Imax; i++){
			
// 		}
// 	}	
// }


Field Grid::ver_FI()
{
	Field error, l2norm;

	error = l2norm = 0.0;

	for(int j = domain.Jmin; j <= domain.Jmax; j++){
		for(int i = domain.Imin; i <= domain.Imax; i++){
			error = mesh[i][j].eFI - mesh[i][j].FI;
			error *= error;
			l2norm += error;
		}
	}

	l2norm.sqroot();
	l2norm /= sqrt(domain.Imax*domain.Jmax);

	cout<<"\nL2 Norm for flux integral:"<<l2norm;
	return l2norm;
}
